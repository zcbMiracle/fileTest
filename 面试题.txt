1.HashMap的底层实现原理
 首先有一个每个元素都是链表（可能表述不准确）的数组，当添加一个元素（key-value）时，就首先计算元素key的hash值，以此确定插入数组中的位置，
 但是可能存在同一hash值的元素已经被放在数组同一位置了，这时就添加到同一hash值的元素的后面，他们在数组的同一位置，但是形成了链表，
 同一各链表上的Hash值是相同的，所以说数组存放的是链表。而当链表长度太长时，链表就转换为红黑树，这样大大提高了查找的效率。

2.ArrayList的底层实现原理
 ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长;
 ArrayList不是线程安全的，只能用在单线程环境下;
 ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输;
 每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。
 自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。

3.实现int数组排序工具类(排序算法)
 方式一：用sort默认升序(从小到大)
	int[] arr = {5,2,66,3,7};
	Arrays.sort(arr);
	for(int i : arr) {
		System.out.println(i);
	}
 方式二、冒泡排序:重复地走访过要排序的数列，一次比较两个元素
	从小到大:
	int[] arr = {5,2,66,3,7};
	int temp;
	for(int i=0;i<arr.length;i++){
	    for(int j=0;j<arr.length-i-1;j++){
	        if(arr[j]>arr[j+1]){
	            temp = arr[j];
	            arr[j] = arr[j+1];
	            arr[j+1] = temp;
	        }
	    }
	}
	for(int a : arr) {
		...
	}
 方式三、选择排序:先找到最小元素所在位置的索引，然后将该元素与第一位上的元素进行交换。
	int arr3[]= {23,12,48,56,45};
    for(int i=0;i<arr3.length;i++) {
		int tem=i;
		//将数组中从i开始的最小的元素所在位置的索引赋值给tem
		for(int j=i;j<arr3.length;j++) {
			if(arr3[j]<arr3[tem]) {
				tem=j;
			}
		}
		//上面获取了数组中从i开始的最小值的位置索引为tem，利用该索引将第i位上的元素与其进行交换
		int temp1=arr3[i];
		arr3[i]=arr3[tem];
		arr3[tem]=temp1;
	}
	for(int a : arr3) {
		...
	}
 方式四、实现Comparator接口(特别记住)
	public static void main(String[] args) {
	   /*注意，要想改变默认的排列顺序，不能使用基本类型（int,double, char）
	   而要使用它们对应的类*/
	   Integer[] a = {9, 8, 7, 2, 3, 4, 1, 0, 6, 5};
	   //定义一个自定义类MyComparator的对象
	   Comparator cmp = new MyComparator();
	   Arrays.sort(a,cmp);
	   for(int arr:a) {
		   System.out.print(arr + " ");
	   }
   }
   //实现Comparator接口
   class MyComparator implements Comparator<Integer> {
		@Override
		public int compare(Integer o1, Integer o2) {
			/*如果o1小于o2，我们就返回正值，如果o1大于o2我们就返回负值，这样颠倒一下，就可以实现降序排序了,反之即可自定义升序排序了*/
			return o2-o1;
		}
	}

4.实现一个对象排序工具类
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.Collections;
	import java.util.Comparator;
	import java.util.List;

	public class Test {
		/**
		 * @param args
		 */
		public static void main(String[] args) {
			Product product[] = new Product[3];
			dog[0]= new Dog("wangchai",10);
			dog[1]= new Dog("laifu",9);
			dog[2]= new Dog("ww",20);
			Arrays.sort(dog);
			for(int i=0;i<dog.length;i++){
				System.out.println(dog[i].name);
			}
		}

	}

	class Dog implements Comparable{
		public Integer tizhong = 0;
		public String name = "";
		public Dog(String name, int tizhong) {
			this.name = name;
			this.tizhong = tizhong;
		}
		//按年龄排序
		@Override
		/*    public int compareTo(Object o) {
			// TODO Auto-generated method stub
			Dog s=(Dog)o;
			return tizhong>s.tizhong?1:(tizhong==s.tizhong?0:-1);
		}*/
		//按名字排序
		/*    public int compareTo(Object o)
		   {
			Dog s=(Dog)o;
				 int result=name.compareTo(s.name);
				 return result;
		   }*/
		//如果先按数字再按字符排序，则这样写：
		 public int compareTo(Object o)
		  {
			Dog s=(Dog)o;
				 int result= tizhong>s.tizhong?1:(tizhong==s.tizhong?0:-1);
				  if (0==result){
					  result=name.compareTo(s.name);
				   }
				 return result;
		  }

	}

5.Sql语句优化
  5.1 like语句优化：
	由于abc前面用了“%”，因此该查询必然走全表查询，除非必要，否则不要在关键词前加%；
  5.2 where子句使用!=或<>操作符优化：
	索引将被放弃使用，会进行全表查询；
	WHERE ID>5 OR ID<5
  5.3 where子句使用or的优化
    where子句中使用了or,索引将被放弃使用。
	使用union all 或 union(必要的时候)的方式替换“or”会得到更好的效果
  5.4 where子句使用IN 或 NOT IN的优化
	in和not in 也要慎用，否则也会导致全表扫描。
	between替换in；exist替换in；left join替换in；
  5.5 where子句中对字段进行表达式操作的优化
	不要在where子句中的“=”左边进行函数、算数运算或其他表达式运算，否则系统将可能无法正确使用索引。
  5.6 任何地方都不要用 select * from table ，用具体的字段列表替换"*"，不要返回用不到的字段
  5.7 使用“临时表”暂存中间结果
　　　采用临时表暂存中间结果好处：
　　（1）避免程序中多次扫描主表，减少程序执行“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。
　　（2）尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。
　　（3）避免频繁创建和删除临时表，以减少系统资源的浪费。
　　（4）尽量避免向客户端返回大数据量，若数据量过大，应考虑相应需求是否合理。
  5.8 批量插入优化
	INSERT into person(name,age) values('A',14)
	INSERT into person(name,age) values('B',14)
	INSERT into person(name,age) values('C',14)
　　可优化为：
	INSERT into person(name,age) values('A',14),('B',14),('C',14),
  5.9 排序的索引问题
	唯一、不为空、经常被查询的字段适合建索引
	Mysql查询只是用一个索引，因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。
	因此数据库默认排序可以符合要求情况下不要使用排序操作；
 　 尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引	

6.概述一下SpringMVC的工作原理
 1)客户端发出一个HTTP请求给web服务器，web服务器对HTTP请求进行解析，如果匹配DispatcherServlet的请求映射路径（在web.xml中指定，或者使用注解），
 web容器将请求转交给dispatcherServelet。
 2)DispacherServelet接受到这个请求之后根据请求的信息（包括URL、Http方法、请求报文头和请求参数Cookie等）以及HandleMapping的配置找到处理请求的处理器Haddler。
 3)DispatcherServlet根据HandlerMapping找到对应的Handler,将处理权交给Handler（Handler将具体的处理进行封装），再由具体的HandlerAdapter对Handler进行具体的调用。
 4)Handler对数据处理完成以后将返回一个ModelAndView()对象给DispatcherServlet。
 5)Handler返回的ModelAndView()只是一个逻辑视图并不是一个正式的视图，DispatcherSevlet通过ViewResolver将逻辑视图转化为真正的视图View。
 6)Dispatcher通过model解析出ModelAndView()中的参数进行解析最终展现出完整的view并返回给客户端。

7.简单的说一下MyBatis的一级缓存和二级缓存？
 Mybatis首先去缓存中查询结果集，如果没有则查询数据库，如果有则从缓存取出返回结果集就不走数据库。
 Mybatis内部存储缓存使用一个HashMap，key为hashCode+sqlId+Sql语句。value为从查询出来映射生成的java对象
 Mybatis的二级缓存即查询缓存，它的作用域是一个mapper的namespace，即在同一个namespace中查询sql可以从缓存中获取数据。
 二级缓存是可以跨SqlSession的。